#!/usr/bin/env ysh

if (len(ARGV) < 1) {
  echo "Need a country country_code"
  exit 1
}
var country_code = ARGV[0]

var rirs = {
  afrinic: "https://ftp.afrinic.net/pub/stats/afrinic/delegated-afrinic-extended-latest",
  apnic: "http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-extended-latest",
  arin: "https://ftp.arin.net/pub/stats/arin/delegated-arin-extended-latest",
  lacnic: "https://ftp.lacnic.net/pub/stats/lacnic/delegated-lacnic-extended-latest",
  ripe: "https://ftp.lacnic.net/pub/stats/ripencc/delegated-ripencc-latest",
}

func rangeToSubnet(range) {
  var i = range
  var c = 32
  while (i > 1) {
    setvar i = i >> 1
    setvar c -= 1
  }
  return (c)
}

proc filter-output (country_code) {
  while read -r line {
    var l = line => split("|")
    if (len(l) < 4) { continue }
    if (l[1] === country_code and l[2] === "ipv4") {
      echo "$[l[3]]/$[rangeToSubnet(l[4])]"
    }
  }
}

# Aggregate
mkfifo mypipe
fork { ./aggregate-subnets.py < mypipe }

cleanup() {
  rm mypipe
  var j = $(jobs -p)
  if test -n $j {
    kill $(jobs -p)
  }
}
trap cleanup EXIT INT TERM

source --builtin draft-synch.ysh

sema-new (0, &s)

for key, val in (rirs) {
  fork {
    try { curl -s $val | filter-output $country_code >> mypipe }
    sema-up (s)
  }
}

var c = 0
while (c < len(rirs)) {
  sema-down (s)
  setvar c += 1
}
